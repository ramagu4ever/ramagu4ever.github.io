import{Color,FrontSide,LinearFilter,MathUtils,Matrix4,Mesh,PerspectiveCamera,Plane,RGBFormat,ShaderMaterial,UniformsLib,UniformsUtils,Vector3,Vector4,WebGLRenderTarget}from"../../../build/three.module.js";var Water=function(geometry,options){Mesh.call(this,geometry);var scope=this,textureWidth=void 0!==(options=options||{}).textureWidth?options.textureWidth:512,textureHeight=void 0!==options.textureHeight?options.textureHeight:512,clipBias=void 0!==options.clipBias?options.clipBias:0,alpha=void 0!==options.alpha?options.alpha:1,time=void 0!==options.time?options.time:0,normalSampler=void 0!==options.waterNormals?options.waterNormals:null,sunDirection=void 0!==options.sunDirection?options.sunDirection:new Vector3(.70707,.70707,0),sunColor=new Color(void 0!==options.sunColor?options.sunColor:16777215),waterColor=new Color(void 0!==options.waterColor?options.waterColor:8355711),eye=void 0!==options.eye?options.eye:new Vector3(0,0,0),distortionScale=void 0!==options.distortionScale?options.distortionScale:20,side=void 0!==options.side?options.side:FrontSide,fog=void 0!==options.fog&&options.fog,mirrorPlane=new Plane,normal=new Vector3,mirrorWorldPosition=new Vector3,cameraWorldPosition=new Vector3,rotationMatrix=new Matrix4,lookAtPosition=new Vector3(0,0,-1),clipPlane=new Vector4,view=new Vector3,target=new Vector3,q=new Vector4,textureMatrix=new Matrix4,mirrorCamera=new PerspectiveCamera,parameters,renderTarget=new WebGLRenderTarget(textureWidth,textureHeight,{minFilter:LinearFilter,magFilter:LinearFilter,format:RGBFormat,stencilBuffer:!1});MathUtils.isPowerOfTwo(textureWidth)&&MathUtils.isPowerOfTwo(textureHeight)||(renderTarget.texture.generateMipmaps=!1);var mirrorShader={uniforms:UniformsUtils.merge([UniformsLib.fog,UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new Matrix4},sunColor:{value:new Color(8355711)},sunDirection:{value:new Vector3(.70707,.70707,0)},eye:{value:new Vector3},waterColor:{value:new Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","#include <common>","#include <fog_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;","#include <logdepthbuf_vertex>","#include <fog_vertex>","#include <shadowmap_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","#include <common>","#include <packing>","#include <bsdfs>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <lights_pars_begin>","#include <shadowmap_pars_fragment>","#include <shadowmask_pars_fragment>","void main() {","#include <logdepthbuf_fragment>","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );","#include <tonemapping_fragment>","#include <fog_fragment>","}"].join("\n")},material=new ShaderMaterial({fragmentShader:mirrorShader.fragmentShader,vertexShader:mirrorShader.vertexShader,uniforms:UniformsUtils.clone(mirrorShader.uniforms),lights:!0,side:side,fog:fog});material.uniforms.mirrorSampler.value=renderTarget.texture,material.uniforms.textureMatrix.value=textureMatrix,material.uniforms.alpha.value=alpha,material.uniforms.time.value=time,material.uniforms.normalSampler.value=normalSampler,material.uniforms.sunColor.value=sunColor,material.uniforms.waterColor.value=waterColor,material.uniforms.sunDirection.value=sunDirection,material.uniforms.distortionScale.value=distortionScale,material.uniforms.eye.value=eye,scope.material=material,scope.onBeforeRender=function(renderer,scene,camera){if(mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld),cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld),rotationMatrix.extractRotation(scope.matrixWorld),normal.set(0,0,1),normal.applyMatrix4(rotationMatrix),view.subVectors(mirrorWorldPosition,cameraWorldPosition),!(view.dot(normal)>0)){view.reflect(normal).negate(),view.add(mirrorWorldPosition),rotationMatrix.extractRotation(camera.matrixWorld),lookAtPosition.set(0,0,-1),lookAtPosition.applyMatrix4(rotationMatrix),lookAtPosition.add(cameraWorldPosition),target.subVectors(mirrorWorldPosition,lookAtPosition),target.reflect(normal).negate(),target.add(mirrorWorldPosition),mirrorCamera.position.copy(view),mirrorCamera.up.set(0,1,0),mirrorCamera.up.applyMatrix4(rotationMatrix),mirrorCamera.up.reflect(normal),mirrorCamera.lookAt(target),mirrorCamera.far=camera.far,mirrorCamera.updateMatrixWorld(),mirrorCamera.projectionMatrix.copy(camera.projectionMatrix),textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),textureMatrix.multiply(mirrorCamera.projectionMatrix),textureMatrix.multiply(mirrorCamera.matrixWorldInverse),mirrorPlane.setFromNormalAndCoplanarPoint(normal,mirrorWorldPosition),mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse),clipPlane.set(mirrorPlane.normal.x,mirrorPlane.normal.y,mirrorPlane.normal.z,mirrorPlane.constant);var projectionMatrix=mirrorCamera.projectionMatrix;q.x=(Math.sign(clipPlane.x)+projectionMatrix.elements[8])/projectionMatrix.elements[0],q.y=(Math.sign(clipPlane.y)+projectionMatrix.elements[9])/projectionMatrix.elements[5],q.z=-1,q.w=(1+projectionMatrix.elements[10])/projectionMatrix.elements[14],clipPlane.multiplyScalar(2/clipPlane.dot(q)),projectionMatrix.elements[2]=clipPlane.x,projectionMatrix.elements[6]=clipPlane.y,projectionMatrix.elements[10]=clipPlane.z+1-clipBias,projectionMatrix.elements[14]=clipPlane.w,eye.setFromMatrixPosition(camera.matrixWorld);var currentRenderTarget=renderer.getRenderTarget(),currentXrEnabled=renderer.xr.enabled,currentShadowAutoUpdate=renderer.shadowMap.autoUpdate;scope.visible=!1,renderer.xr.enabled=!1,renderer.shadowMap.autoUpdate=!1,renderer.setRenderTarget(renderTarget),renderer.state.buffers.depth.setMask(!0),!1===renderer.autoClear&&renderer.clear(),renderer.render(scene,mirrorCamera),scope.visible=!0,renderer.xr.enabled=currentXrEnabled,renderer.shadowMap.autoUpdate=currentShadowAutoUpdate,renderer.setRenderTarget(currentRenderTarget);var viewport=camera.viewport;void 0!==viewport&&renderer.state.viewport(viewport)}}};Water.prototype=Object.create(Mesh.prototype),Water.prototype.constructor=Water;export{Water};